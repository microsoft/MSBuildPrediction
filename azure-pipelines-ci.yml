variables:
  Solution: 'MSBuildPrediction.sln'
  LogDirectory: $(Build.ArtifactStagingDirectory)/logs
  ArtifactsDirectory: artifacts
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  DotNet6Version: '6.x'
  DotNet7Version: '7.x'
  DotNet8Version: '8.x'
  MSBuildArgs: '"/p:Platform=$(BuildPlatform)" "/p:Configuration=$(BuildConfiguration)" "/BinaryLogger:$(LogDirectory)/msbuild.binlog"'
  SignType: 'Test'

schedules:
- cron: '0 0 * * *'
  displayName: Daily midnight build
  branches:
    include:
    - main

trigger:
  batch: true
  branches:
    include:
    - 'main'
    - 'refs/tags/*'

jobs:
- job: WindowsBuild
  displayName: 'Build and Test (Windows)'
  pool:
    vmImage: windows-latest
  steps:

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet6Version)'
    inputs:
      version: '$(DotNet6Version)'

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet7Version)'
    inputs:
      version: '$(DotNet7Version)'

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet8Version)'
    inputs:
      version: '$(DotNet8Version)'

  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: 'build'
      projects: '$(Solution)'
      arguments: '$(MSBuildArgs)'

  # UTs fail: The tools version "Current" is unrecognized. Available tools versions are "2.0", "3.5", "4.0".
  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET Framework)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net472 /noautorsp'
  #    testRunTitle: 'Windows .NET Framework'
  #  condition: succeededOrFailed()

  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests (.NET 6.0)'
    inputs:
      command: 'test'
      arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net6.0 /noautorsp'
      testRunTitle: 'Windows .NET 6.0'
    condition: succeededOrFailed()

  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests (.NET 7.0)'
    inputs:
      command: 'test'
      arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net7.0 /noautorsp'
      testRunTitle: 'Windows .NET 7.0'
    condition: succeededOrFailed()

  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests (.NET 8.0)'
    inputs:
      command: 'test'
      arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net8.0 /noautorsp'
      testRunTitle: 'Windows .NET 8.0'
    condition: succeededOrFailed()

  - publish: $(ArtifactsDirectory)
    displayName: Publish Artifacts
    artifact: '$(System.JobDisplayName) artifacts'
    condition: always()

  - publish: $(LogDirectory)
    displayName: Publish Logs
    artifact: '$(System.JobDisplayName) logs'
    condition: always()

- job: LinuxBuild
  displayName: 'Build and Test (Linux)'
  pool:
    vmImage: ubuntu-latest
  steps:

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet6Version)'
    inputs:
      version: '$(DotNet6Version)'

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet7Version)'
    inputs:
      version: '$(DotNet7Version)'

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet8Version)'
    inputs:
      version: '$(DotNet8Version)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      arguments: '$(MSBuildArgs)'

  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET 6.0)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net6.0 /noautorsp'
  #    testRunTitle: 'Linux .NET 6.0'
  #  condition: succeededOrFailed()

  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET 7.0)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net7.0 /noautorsp'
  #    testRunTitle: 'Linux .NET 7.0'
  #  condition: succeededOrFailed()

  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET 8.0)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net8.0 /noautorsp'
  #    testRunTitle: 'Linux .NET 8.0'
  #  condition: succeededOrFailed()

  - publish: $(ArtifactsDirectory)
    displayName: Publish Artifacts
    artifact: '$(System.JobDisplayName) artifacts'
    condition: always()

  - publish: $(LogDirectory)
    displayName: Publish Logs
    artifact: '$(System.JobDisplayName) logs'
    condition: always()

- job: MacOSBuild
  displayName: 'Build and Test (Mac)'
  pool:
    vmImage: macOS-latest
  steps:

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet6Version)'
    inputs:
      version: '$(DotNet6Version)'

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet7Version)'
    inputs:
      version: '$(DotNet7Version)'

  - task: UseDotNet@2
    displayName: 'Install .NET $(DotNet8Version)'
    inputs:
      version: '$(DotNet8Version)'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: 'build'
      arguments: '$(MSBuildArgs)'

  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET 6.0)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net6.0 /noautorsp'
  #    testRunTitle: 'MacOS .NET 6.0'
  #  condition: succeededOrFailed()

  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET 7.0)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net7.0 /noautorsp'
  #    testRunTitle: 'MacOS .NET 7.0'
  #  condition: succeededOrFailed()

  #- task: DotNetCoreCLI@2
  #  displayName: 'Run Unit Tests (.NET 8.0)'
  #  inputs:
  #    command: 'test'
  #    arguments: '--no-restore --no-build --configuration $(BuildConfiguration) --framework net8.0 /noautorsp'
  #    testRunTitle: 'MacOS .NET 8.0'
  #  condition: succeededOrFailed()

  - publish: $(ArtifactsDirectory)
    displayName: Publish Artifacts
    artifact: '$(System.JobDisplayName) artifacts'
    condition: always()

  - publish: $(LogDirectory)
    displayName: Publish Logs
    artifact: '$(System.JobDisplayName) logs'
    condition: always()
